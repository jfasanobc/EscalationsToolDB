package MainPackage;


import BCLibrary.StoreBasic; 
import java.awt.Desktop;

import javax.swing.JEditorPane; 

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.util.HashMap;
import java.sql.*;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author julio
 */
public class EscalationsDesktop extends javax.swing.JFrame {
    private String storeURL;
    private String username;
    private String password;
    private boolean exemption;
    private StoreBasic store;
    private StoreSetup storeSetupIF;
    private Connection databaseRepository;

    private OrphanedCategories orphanedCategoriesIF;
    private OrphanedProducts orphanedProductsIF;
    private OrphanedSKUs orphanedSKUsIF;
    private OrphanedRules orphanedRulesIF;
    private DeleteForm deleteFormIF;
    private CSVExport csvExportIF;
    private APIInfo apiInfoIF;
    private CustomerAddFix customerAddFixIF;
    private final HashMap<String, JInternalFrame> framesAdded;
    private int pullLimit;
    /**
     * Creates new form EscalationsDesktop
     * @throws java.sql.SQLException
     * @throws java.lang.ClassNotFoundException
     */
    public EscalationsDesktop() throws SQLException, ClassNotFoundException {
        framesAdded = new HashMap<>();
        Class.forName("org.sqlite.JDBC");
        this.databaseRepository = DriverManager.getConnection("jdbc:sqlite:escalationDB.db");
        //drop tables
        Statement statement = databaseRepository.createStatement();
        statement.execute("DROP TABLE IF EXISTS allCats");
        statement.execute("DROP TABLE IF EXISTS allProducts");
        statement.execute("DROP TABLE IF EXISTS allSKUs");
        statement.execute("DROP TABLE IF EXISTS allRules");
        statement.execute("DROP TABLE IF EXISTS deleteformtable");
        statement.execute("DROP TABLE IF EXISTS orphanedProducts");
        statement.execute("DROP TABLE IF EXISTS categories");
        statement.execute("DROP TABLE IF EXISTS files");
        statement.execute("DROP TABLE IF EXISTS images");
        statement.execute("DROP TABLE IF EXISTS taxes");
        statement.execute("DROP TABLE IF EXISTS brands");
        statement.execute("DROP TABLE IF EXISTS products");
        statement.execute("DROP TABLE IF EXISTS option_sets");
        statement.execute("DROP TABLE IF EXISTS option_set_options");
        statement.execute("DROP TABLE IF EXISTS options_values");
        statement.execute("DROP TABLE IF EXISTS options");
        statement.execute("DROP TABLE IF EXISTS skus");
        statement.execute("DROP TABLE IF EXISTS rules");
        statement.execute("PRAGMA auto_vacuum = 1");
        statement.execute("VACUUM");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escalationsDesktop = new javax.swing.JDesktopPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        statusPane = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        connectivity = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        connectStore = new javax.swing.JMenuItem();
        disconnectStore = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        productMenu = new javax.swing.JMenu();
        csvDownload = new javax.swing.JMenuItem();
        diagnosticMenu = new javax.swing.JMenu();
        orphanedMenu = new javax.swing.JMenu();
        orphanedCategories = new javax.swing.JMenuItem();
        orphanedProducts = new javax.swing.JMenuItem();
        orphanedSkus = new javax.swing.JMenuItem();
        orphanedRules = new javax.swing.JMenuItem();
        custAddFix = new javax.swing.JMenuItem();
        apiInfo = new javax.swing.JMenuItem();
        deleteForm = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Escalations Tool");
        setResizable(false);

        javax.swing.GroupLayout escalationsDesktopLayout = new javax.swing.GroupLayout(escalationsDesktop);
        escalationsDesktop.setLayout(escalationsDesktopLayout);
        escalationsDesktopLayout.setHorizontalGroup(
            escalationsDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 840, Short.MAX_VALUE)
        );
        escalationsDesktopLayout.setVerticalGroup(
            escalationsDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 340, Short.MAX_VALUE)
        );

        statusPane.addHyperlinkListener(new HyperlinkListener() {
            public void hyperlinkUpdate(HyperlinkEvent e) {
                if(e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
                    if(Desktop.isDesktopSupported()) {
                        try {
                            Desktop.getDesktop().browse(e.getURL().toURI());
                        } catch (MalformedURLException ex) {
                        } catch (IOException ex) {
                        } catch (URISyntaxException ex) {
                        }
                    }// Do something with e.getURL() here
                }
            }
        });
        statusPane.setEditable(false);
        statusPane.setContentType("text/html"); // NOI18N
        statusPane.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        statusPane.setFocusable(false);
        statusPane.setRequestFocusEnabled(false);
        jScrollPane3.setViewportView(statusPane);

        connectivity.setEditable(false);
        connectivity.setFocusable(false);
        jScrollPane1.setViewportView(connectivity);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fileMenu.setText("File");
        fileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuActionPerformed(evt);
            }
        });

        connectStore.setText("Connect To Store");
        connectStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectStoreActionPerformed(evt);
            }
        });
        fileMenu.add(connectStore);

        disconnectStore.setText("Disconnect Store");
        disconnectStore.setEnabled(false);
        disconnectStore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectStoreActionPerformed(evt);
            }
        });
        fileMenu.add(disconnectStore);

        jMenuItem1.setText("Exit");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItem1);

        jMenuBar1.add(fileMenu);

        productMenu.setText("Products");
        productMenu.setEnabled(false);

        csvDownload.setText("CSV Download");
        csvDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvDownloadActionPerformed(evt);
            }
        });
        productMenu.add(csvDownload);

        jMenuBar1.add(productMenu);

        diagnosticMenu.setText("Diagnostic");
        diagnosticMenu.setEnabled(false);

        orphanedMenu.setText("Check Orphans");

        orphanedCategories.setText("Categories");
        orphanedCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orphanedCategoriesActionPerformed(evt);
            }
        });
        orphanedMenu.add(orphanedCategories);

        orphanedProducts.setText("Products");
        orphanedProducts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orphanedProductsActionPerformed(evt);
            }
        });
        orphanedMenu.add(orphanedProducts);

        orphanedSkus.setText("SKUs");
        orphanedSkus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orphanedSkusActionPerformed(evt);
            }
        });
        orphanedMenu.add(orphanedSkus);

        orphanedRules.setText("Rules");
        orphanedRules.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orphanedRulesActionPerformed(evt);
            }
        });
        orphanedMenu.add(orphanedRules);

        diagnosticMenu.add(orphanedMenu);

        custAddFix.setText("Customer Address Fix");
        custAddFix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                custAddFixActionPerformed(evt);
            }
        });
        diagnosticMenu.add(custAddFix);

        apiInfo.setText("API Information Pull");
        apiInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apiInfoActionPerformed(evt);
            }
        });
        diagnosticMenu.add(apiInfo);

        deleteForm.setText("Delete Form");
        deleteForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFormActionPerformed(evt);
            }
        });
        diagnosticMenu.add(deleteForm);

        jMenuBar1.add(diagnosticMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escalationsDesktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(escalationsDesktop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectStoreActionPerformed
        // TODO add your handling code here:
        if(!framesAdded.containsKey("store_setup")) {
            storeSetupIF = new StoreSetup();
            escalationsDesktop.add(storeSetupIF);
            framesAdded.put("store_setup", storeSetupIF);
        }
        storeSetupIF.setVisible(true);
    }//GEN-LAST:event_connectStoreActionPerformed

    private void csvDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvDownloadActionPerformed
        /*try {
            // TODO add your handling code here:
            csvExportIF = new CSVExport(this.store, this);
            escalationsDesktop.add(csvExportIF);
            csvExportIF.setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        if(!framesAdded.containsKey("csvexport")) {
            try {
                csvExportIF = new CSVExport(store, this);
                escalationsDesktop.add(csvExportIF);
                framesAdded.put("csvexport", csvExportIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        csvExportIF.setVisible(true);
    }//GEN-LAST:event_csvDownloadActionPerformed

    private void orphanedCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orphanedCategoriesActionPerformed
        try {
            String allCats = "CREATE TABLE IF NOT EXISTS allCats" +
                             "(catid INT NOT NULL, " + 
                             " catName TEXT NOT NULL, " + 
                             " parentID INT NOT NULL)";
            Statement statement = databaseRepository.createStatement();
            statement.executeUpdate(allCats);
            
        } catch (SQLException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        if(!framesAdded.containsKey("orphaned_categories")) {
            try {
                orphanedCategoriesIF = new OrphanedCategories(store, this);
                escalationsDesktop.add(orphanedCategoriesIF);
                framesAdded.put("orphaned_categories", orphanedCategoriesIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        orphanedCategoriesIF.setVisible(true);
    }//GEN-LAST:event_orphanedCategoriesActionPerformed

    private void apiInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apiInfoActionPerformed
        if(!framesAdded.containsKey("api")) {
            apiInfoIF = new APIInfo(store, this);
            escalationsDesktop.add(apiInfoIF);
            framesAdded.put("api", apiInfoIF);
        }
        apiInfoIF.setVisible(true);
    }//GEN-LAST:event_apiInfoActionPerformed

    private void orphanedProductsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orphanedProductsActionPerformed
        try {
            String createTable = "CREATE TABLE IF NOT EXISTS orphanedProducts " +
                                 "(productID INT NOT NULL)";
            String createTable2 = "CREATE TABLE IF NOT EXISTS moveProducts " +
                                  "(productID INT NOT NULL, " + 
                                  " categoryAssigned TEXT NOT NULL)";
            
            Statement statement = databaseRepository.createStatement();
            statement.executeUpdate(createTable);
            statement.executeUpdate(createTable2);
        } catch (SQLException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        } 
        if(!framesAdded.containsKey("orphaned_products")) {
            try {
                orphanedProductsIF = new OrphanedProducts(store, this);
                escalationsDesktop.add(orphanedProductsIF);
                framesAdded.put("orphaned_products", orphanedProductsIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       orphanedProductsIF.setVisible(true);
    }//GEN-LAST:event_orphanedProductsActionPerformed

    private void orphanedSkusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orphanedSkusActionPerformed
        String allProds = "CREATE TABLE IF NOT EXISTS allProducts " + 
                         "(prodID INT NOT NULL, " +
                         " prodname TEXT NOT NULL) ";
        String allSkus = "CREATE TABLE IF NOT EXISTS allSKUs " +
                         "(prodID INT NOT NULL, " +
                         " skuname TEXT NOT NULL, " + 
                         " skuid INT NOT NULL)";
        try {
            Statement statement = databaseRepository.createStatement();
            statement.executeUpdate(allProds);
            statement.executeUpdate(allSkus);
        } catch (SQLException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!framesAdded.containsKey("orphaned_skus")) {
            try {
                orphanedSKUsIF = new OrphanedSKUs(store, this);
                escalationsDesktop.add(orphanedSKUsIF);
                framesAdded.put("orphaned_skus", orphanedSKUsIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        orphanedSKUsIF.setVisible(true);
    }//GEN-LAST:event_orphanedSkusActionPerformed

    private void fileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuActionPerformed
        
    }//GEN-LAST:event_fileMenuActionPerformed

    private void disconnectStoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectStoreActionPerformed
        int dialogOption = JOptionPane.YES_NO_OPTION;
        JOptionPane.showConfirmDialog(this, "<html>Are you sure you want to disconnect from<br>"
                + "<center>" + storeURL + "?</center></html>");
        if (dialogOption == JOptionPane.YES_OPTION) {
            for(JInternalFrame frame:framesAdded.values())
                frame.dispose();
            framesAdded.clear();
            store = null;
            productMenu.setEnabled(false);
            diagnosticMenu.setEnabled(false);
            setConnectivityText("No", 0);
            disconnectStore.setEnabled(false);
            connectStore.setEnabled(true);
        }
    }//GEN-LAST:event_disconnectStoreActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void orphanedRulesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orphanedRulesActionPerformed
        String createTable = "CREATE TABLE IF NOT EXISTS orphanedRules " +
                             "(ruleID INT NOT NULL)";
        String allProds = "CREATE TABLE IF NOT EXISTS allProducts " + 
                         "(prodID INT NOT NULL, " +
                         " prodname TEXT NOT NULL) ";
        String allRules = "CREATE TABLE IF NOT EXISTS allRules " +
                         "(prodID INT NOT NULL, " +
                         " ruleid INT NOT NULL)";
        try {
            Statement statement = databaseRepository.createStatement();
            statement.executeUpdate(createTable);
            statement.executeUpdate(allProds);
            statement.executeUpdate(allRules);
        } catch (SQLException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!framesAdded.containsKey("orphaned_rules")) {
            try {
                orphanedRulesIF = new OrphanedRules(store, this);
                escalationsDesktop.add(orphanedRulesIF);
                framesAdded.put("orphaned_rules", orphanedRulesIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        orphanedRulesIF.setVisible(true);
    }//GEN-LAST:event_orphanedRulesActionPerformed

    private void deleteFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFormActionPerformed
        String deleteTable = "CREATE TABLE IF NOT EXISTS deleteformtable " +
                             "(id TEXT NOT NULL)";
        try {
            Statement statement = databaseRepository.createStatement();
            statement.executeUpdate(deleteTable);
        } catch (SQLException ex) {
            Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(!framesAdded.containsKey("delete_form")) {
            try {
                deleteFormIF = new DeleteForm(store, this);
                escalationsDesktop.add(deleteFormIF);
                framesAdded.put("delete_form", deleteFormIF);
            } catch (SQLException ex) {
                Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        deleteFormIF.setVisible(true);
    }//GEN-LAST:event_deleteFormActionPerformed

    private void custAddFixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_custAddFixActionPerformed
        if(!framesAdded.containsKey("cust_add_fix")) {
            try {
                customerAddFixIF = new CustomerAddFix(store, this);
                escalationsDesktop.add(customerAddFixIF);
                framesAdded.put("cust_add_fix", customerAddFixIF);
            } catch (IOException | ClassNotFoundException ex) {
                
            }
        }
        customerAddFixIF.setVisible(true);
    }//GEN-LAST:event_custAddFixActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EscalationsDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EscalationsDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EscalationsDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EscalationsDesktop.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                try {
                    new EscalationsDesktop().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(EscalationsDesktop.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    //mutators
    public void setStoreURL(String storeURL) {
        this.storeURL = storeURL;
    }
    public void setPassWord(String password) {
        this.password = password;
    }
    public void setUserName(String username) {
        this.username = username;
    }
    
    public void setConnection(StoreBasic store) {
        this.store = store;
    }
    public void setConnectivityText (String connected, int apiLimit) {
        connectivity.setText("Connected: " + connected + "\n" + "API Remaining: " + apiLimit);
    }
    public void isConnectStoreVisible(boolean value) {
        this.connectStore.setEnabled(value);
    }
    public void isDissconnectStoreVisble (boolean value) {
        this.disconnectStore.setEnabled(value);
    }
    
    public void makeStoreConnected() {
        diagnosticMenu.setEnabled(true);
        disconnectStore.setEnabled(true);
        connectStore.setEnabled(false);
        productMenu.setEnabled(true);
    }
    //getters
    public Connection getDBConnection() {
        return databaseRepository;
    }
    
    public JEditorPane getConnectivity() {
        return connectivity;
    }
    public void setStatusPane(String value) {
        statusPane.setText(statusPane.getText() + value);
    }
    public void appendStatusPane (String value) throws BadLocationException, IOException {
        HTMLDocument document = (HTMLDocument) statusPane.getDocument();
        HTMLEditorKit editorKit = (HTMLEditorKit) statusPane.getEditorKit();
        editorKit.insertHTML(document, document.getLength(), value, 0, 0, null);
        //document.insertString(document.getLength(), value, null);
    }
    
    public void setExemption(boolean value) {
        exemption = value;
    }
    
   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem apiInfo;
    private javax.swing.JMenuItem connectStore;
    private javax.swing.JTextPane connectivity;
    private javax.swing.JMenuItem csvDownload;
    private javax.swing.JMenuItem custAddFix;
    private javax.swing.JMenuItem deleteForm;
    private javax.swing.JMenu diagnosticMenu;
    private javax.swing.JMenuItem disconnectStore;
    private javax.swing.JDesktopPane escalationsDesktop;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem orphanedCategories;
    private javax.swing.JMenu orphanedMenu;
    private javax.swing.JMenuItem orphanedProducts;
    private javax.swing.JMenuItem orphanedRules;
    private javax.swing.JMenuItem orphanedSkus;
    private javax.swing.JMenu productMenu;
    private javax.swing.JTextPane statusPane;
    // End of variables declaration//GEN-END:variables
}
