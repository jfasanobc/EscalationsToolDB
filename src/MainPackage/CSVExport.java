 package MainPackage;


import BCLibrary.StoreBasic;
import Threads.ProgressThread;
import Threads.UpdateThread;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import javax.swing.text.BadLocationException;
import org.json.JSONArray;
import org.json.JSONObject;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author julio
 */
public class CSVExport extends javax.swing.JInternalFrame {
    private StoreBasic store;
    private EscalationsDesktop desktop;
    private Connection databaseRepository;
    private ProgressThread newThread;
    private UpdateThread apiThread;
    private int apiCount;
    private int LIMIT;

    
    public CSVExport() {
        initComponents();
    }
    
    public CSVExport(StoreBasic store, EscalationsDesktop desktop) throws IOException, ClassNotFoundException, SQLException {
        this.store = store;
        this.desktop = desktop;
        databaseRepository = desktop.getDBConnection();
        this.apiCount = 0;
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSaver = new javax.swing.JFileChooser();
        progressBar = new javax.swing.JProgressBar();
        limitLabel = new javax.swing.JLabel();
        prefixLabel = new javax.swing.JLabel();
        generateLabel = new javax.swing.JButton();
        limitComboBox = new javax.swing.JComboBox();
        prefixTextField = new javax.swing.JTextField();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("CSV Export");

        progressBar.setStringPainted(true);

        limitLabel.setText("Limit");

        prefixLabel.setText("Filename Prefix");

        generateLabel.setText("Generate");
        generateLabel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateLabelActionPerformed(evt);
            }
        });

        limitComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "50", "100", "150", "200", "250", "300", "350", "400", "450", "500", "550", "600", "650", "700", "750", "800", "850", "900", "950", "1000" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(limitLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(limitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(generateLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(prefixLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(prefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 119, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(limitLabel)
                    .addComponent(generateLabel)
                    .addComponent(limitComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prefixLabel)
                    .addComponent(prefixTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateLabelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLabelActionPerformed
        SwingWorker <Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
            protected Void doInBackground() throws Exception {
        List <String> fieldsNeeded = new ArrayList<>();
        LIMIT = Integer.parseInt((String) limitComboBox.getSelectedItem());
        prefixTextField.setEnabled(false);
        limitComboBox.setEnabled(false);
        generateLabel.setEnabled(false);
        //gather categories
        try {
            String fieldArray[] = {"id", "parent_id", "name"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Categories");
            recursiveAddition("categories", "categories", fieldsNeeded);
        
            //gather files
            fieldArray = new String[] {"file", "description", "max_downloads", "expires_after", "product_id"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Files");
            recursiveAddition("products/downloads", "files", fieldsNeeded);
        
            //gather images
            fieldArray = new String[] {"id", "product_id", "image_file", "is_thumbnail", "sort_order", "description", "is_sample"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Images");
            recursiveAddition("products/images", "images", fieldsNeeded);
        
            //gather taxes
            fieldArray = new String[] {"id", "name"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Taxes");
            recursiveAddition("tax_classes", "taxes", fieldsNeeded);
        
            //gather brands
            System.out.println("Gathering Brands");
            recursiveAddition("brands", "brands", fieldsNeeded);
        
            //gather option sets
            System.out.println("Gathering Option Sets");
            recursiveAddition("option_sets", "option_sets", fieldsNeeded);
        
            //gather taxes
            System.out.println("Gathering Taxes");
            recursiveAddition("tax_classes", "taxes", fieldsNeeded);
        
            //gather option values
            fieldArray = new String[] {"id", "option_id", "label", "sort_order", "value"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Option Values");
            recursiveAddition("options/values", "options_values", fieldsNeeded);
        
            //gather options
            fieldArray = new String[] {"id", "type", "display_name", "name"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Options");
            recursiveAddition("options", "options", fieldsNeeded);
        
            //gather option set options
            fieldArray = new String[] {"id", "option_id", "display_name", "option_set_id"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Option Set Options");
            recursiveAddition("option_sets/options", "option_set_options", fieldsNeeded);
        
            //gather products
            fieldArray = new String[] {"id","name","type","sku","bin_picking_number","brand_id","option_set_id","option_set_display","description","price","cost_price","retail_price","sale_price","fixed_cost_shipping_price","is_free_shipping","warranty","weight","width","height","depth","availability","is_visible","availability_description","inventory_tracking","inventory_level","inventory_warning_level","categories","search_keywords","page_title","meta_keywords","meta_description","myob_asset_account","myob_income_account","myob_expense_account","condition","is_condition_shown","event_date_field_name","event_date_type","event_date_start","event_date_end","sort_order","tax_class_id","upc","custom_url"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Products");
            recursiveAddition("products", "products", fieldsNeeded);
        
            //gather skus
            fieldArray = new String[] {"id", "product_id", "sku", "cost_price", "upc", "inventory_level", "inventory_warning_level", "bin_picking_number", "options"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering SKUs");
            recursiveAddition("products/skus", "skus", fieldsNeeded);
       
            //gather rules
            fieldArray = new String[] {"id", "product_id", "is_stop", "image_file", "is_enabled", "is_purchasing_hidden", "is_purchasing_disabled", "price_adjuster", "weight_adjuster", "conditions"};
            fieldsNeeded = Arrays.asList(fieldArray);
            System.out.println("Gathering Rules");
            recursiveAddition("products/rules", "rules", fieldsNeeded);
            desktop.appendStatusPane("Used " + apiCount + " API requests");
            apiThread.toggle("off");
            
        } catch(SQLException ex) {
            
        } catch (BadLocationException | IOException ex) {
            Logger.getLogger(CSVExport.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(CSVExport.class.getName()).log(Level.SEVERE, null, ex);
        }
        // now to right the file
        
        String existRulesCount = "SELECT COUNT(1)\n" +
                                 "FROM rules\n" +
                                 "INNER JOIN products\n" +
                                 "ON products.id = rules.product_id";
        String existSkusCount = "SELECT COUNT(1)\n" +
                                "FROM skus\n" +
                                "INNER JOIN products\n" +
                                "ON products.id = skus.product_id";
        String queryStatement = "SELECT MAX(filecount) AS 'maxfilecount' " +
                                "FROM " +
                                "(SELECT product_id, COUNT(*) AS 'filecount' " +
                                 "FROM files AS 'filesid' " +
                                 "WHERE EXISTS " +
                                "(SELECT id " +
                                 "FROM products AS 'productids' " +
                                 "WHERE filesid.product_id = productids.id) " +
                                 "GROUP BY product_id) ";
        
        int maxFileCount = getCount(queryStatement);
        queryStatement = "SELECT MAX(imagecount) \n" +
                         "FROM (\n" +
                         "SELECT product_id, COUNT(product_id) as 'imagecount'\n" +
                         "FROM images\n" +
                         "INNER JOIN products\n" +
                         "ON images.product_id = products.id\n" +
                         "GROUP BY product_id)";
        int maxImageCount = getCount(queryStatement);
        queryStatement = "SELECT COUNT(*) FROM products";
        int productCount = getCount(queryStatement);
        int rulesExist = getCount(existRulesCount);
        int skusExist = getCount(existSkusCount);
        int currentLine = 0;
        int totalLines = productCount + rulesExist + skusExist;
        int pages = (productCount / LIMIT) + (((productCount % LIMIT) > 0) ? 1 : 0);
        newThread = new ProgressThread(progressBar, false, true);
        newThread.setPercentage(0);
        newThread.setCurrentTask("Generating the CSV");
        newThread.start();
        //CSV headers
        String headerStart =  "Item Type,Product ID,Product Name,Product Type,Product Code/SKU,Bin Picking Number,Brand Name,Option Set,Option Set Align,Product Description,Price,Cost Price,Retail Price,Sale Price,Fixed Shipping Cost,Free Shipping,Product Warranty,Product Weight,Product Width,Product Height,Product Depth,Allow Purchases?,Product Visible?,Product Availability,Track Inventory,Current Stock Level,Low Stock Level,Category";
        String headerFiles = "";
        String headerImages = "";
        String headerFinal = ",Search Keywords,Page Title,Meta Keywords,Meta Description,MYOB Asset Acct,MYOB Income Acct,MYOB Expense Acct,Product Condition,Show Product Condition?,Event Date Required?,Event Date Name,Event Date Is Limited?,Event Date Start Date,Event Date End Date,Sort Order,Product Tax Class,Product UPC/EAN,Stop Processing Rules,Product URL,Redirect Old URL?";
        
        //build file headers
        for(int counter = 1; counter <= maxFileCount; counter++ )
            headerFiles += ",Product File - " + counter + ",Product File Description - " + counter + ",Product File Max Download - " + counter + ",Product File Expires After - " + counter;
        for(int counter = 1; counter <= maxImageCount; counter++)
            headerImages += ",Product Image ID - " + counter + ",Product Image File - " + counter + ",Product Image Description - " + counter + ",Product Image Is Thumbnail - " + counter + ",Product Image Sort - " + counter;
        String filename = prefixTextField.getText();
        int fileNameCount = 0;
        File file = new File(filename + ".csv");
        PrintWriter output = new PrintWriter(new BufferedWriter(new FileWriter(file)),false);
        output.print(headerStart + headerFiles + headerImages + headerFinal + "\n");
        currentLine++;
        int numOfLines = 0;
        databaseRepository.setAutoCommit(false);
        //load categories in memory
        ResultSet categoriesResult = databaseRepository.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY).executeQuery("SELECT * FROM categories");
        HashMap <Integer, String> categoryName = new HashMap <>();
        HashMap <Integer, Integer> categoryParent = new HashMap<>();
        while(categoriesResult.next()) {
            categoryName.put(categoriesResult.getInt("id"), categoriesResult.getString("name"));
            categoryParent.put(categoriesResult.getInt("id"), categoriesResult.getInt("parent_id"));
        }
        categoriesResult.close();
        for(int page = 1; page <= pages; page++) {
            queryStatement = "SELECT * FROM products LIMIT " + LIMIT + (((LIMIT * (page - 1)) > 0) ? (" OFFSET " + (LIMIT * (page - 1))) : "");
            ResultSet productPull = databaseRepository.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY).executeQuery(queryStatement);
            StringBuilder csvproduct;
            while (productPull.next()) {
                csvproduct = new StringBuilder("");
                int skuCount = getCount("SELECT COUNT(1) FROM skus WHERE product_id = " + productPull.getInt("id"));
                int ruleCount = getCount("SELECT COUNT(1) FROM rules WHERE product_id = " + productPull.getInt("id"));
                if (ruleCount + skuCount + numOfLines >= 64500) {
                    fileNameCount++;
                    output.close();
                    output = new PrintWriter(new File(filename + "-" + fileNameCount + ".csv"));
                    output.println(headerStart + headerFiles + headerImages + headerFinal);
                    numOfLines = 0;
                }
                csvproduct.append("Product,");
                csvproduct.append(productPull.getInt("id")).append(",");
                csvproduct.append(csvify(productPull.getString("name"))).append(",");
                csvproduct.append((productPull.getString("type").equals("physical")) ? "P," : "D,");
                csvproduct.append(csvify(productPull.getString("sku"))).append(",");
                csvproduct.append(csvify(productPull.getString("bin_picking_number"))).append(",");
                csvproduct.append(csvify(getNameFromID(productPull.getInt("brand_id"),"brands"))).append(",");
                csvproduct.append(csvify(getNameFromID(productPull.getInt("option_set_id"), "option_sets"))).append(",");
                csvproduct.append(Character.toUpperCase(productPull.getString("option_set_display").charAt(0))).append(productPull.getString("option_set_display").substring(1)).append(",");
                csvproduct.append(csvify(productPull.getString("description"))).append(",");
                csvproduct.append(productPull.getDouble("price")).append(",");
                csvproduct.append(productPull.getDouble("cost_price")).append(",");
                csvproduct.append(productPull.getDouble("retail_price")).append(",");
                csvproduct.append(productPull.getDouble("sale_price")).append(",");
                csvproduct.append(productPull.getDouble("fixed_cost_shipping_price")).append(",");
                csvproduct.append(productPull.getInt("is_free_shipping") == 0 ? "N" : "Y").append(",");
                csvproduct.append(csvify(productPull.getString("warranty"))).append(",");
                csvproduct.append(productPull.getDouble("weight")).append(",");
                csvproduct.append(productPull.getDouble("width")).append(",");
                csvproduct.append(productPull.getDouble("height")).append(",");
                csvproduct.append(productPull.getDouble("depth")).append(",");
                csvproduct.append(productPull.getString("availability").equals("available") ? "Y" : "N").append(",");
                csvproduct.append((productPull.getInt("is_visible") == 0) ? "N" : "Y").append(",");
                csvproduct.append(csvify(productPull.getString("availability_description"))).append(",");
                if (productPull.getString("inventory_tracking").equals("simple"))
                    csvproduct.append("by product,");
                else if (productPull.getString("inventory_tracking").equals("sku"))
                    csvproduct.append("by option,");
                else
                    csvproduct.append("none,");
                csvproduct.append(productPull.getInt("inventory_level")).append(",");
                csvproduct.append(productPull.getInt("inventory_warning_level")).append(",");
                JSONArray categories = new JSONArray(productPull.getString("categories"));
                StringBuilder categoryString = new StringBuilder("");
                for(int counter = 0; counter < categories.length(); counter++) {
                    categoryString.append(getCategory(categories.getInt(counter), categoryName, categoryParent));
                    if (counter < categories.length() - 1)
                        categoryString.append(";");
                }
                csvproduct.append(csvify(categoryString)).append(",");
                //files and image needed here
                StringBuilder fileCSV = new StringBuilder("");
                int fileCount = getCount("SELECT COUNT(1) FROM files WHERE product_id = " + productPull.getInt("id"));
                if (fileCount > 0) {
                    ResultSet files = databaseRepository.createStatement().executeQuery("SELECT * FROM files WHERE product_id = " + productPull.getInt("id"));
                    int internalCounter = 0;
                    while (files.next()) {
                        fileCSV.append(files.getString("file")).append(",").append(csvify(files.getString("description"))).append(",").append(files.getInt("max_downloads")).append(",").append((files.getInt("expires_after") == 0) ? "Never," : ((files.getInt("expires_after") / 86400) + " Days,"));
                        internalCounter++;
                    }
                    if (internalCounter < maxFileCount) {
                        for(int counter = 0; counter < (maxFileCount - internalCounter); counter++) 
                            fileCSV.append(",,,,");
                    }
                    files.close();
                }
                else {
                    for(int counter = 0; counter < maxFileCount; counter++)
                        fileCSV.append(",,,,");
                }
                csvproduct.append(fileCSV);
                StringBuilder imageCSV = new StringBuilder("");
                int imageCount = getCount("SELECT COUNT(1) FROM images WHERE product_id = " + productPull.getInt("id"));
                if (imageCount > 0) {
                    ResultSet images = databaseRepository.createStatement().executeQuery("SELECT * FROM images WHERE product_id = " + productPull.getInt("id"));
                    int internalCounter = 0;
                    while (images.next()) {
                        imageCSV.append(images.getInt("id")).append(",").append(images.getString("image_file")).append(",").append(csvify(images.getString("description"))).append(",").append(images.getInt("is_thumbnail") == 0 ? "N" : "Y").append(",").append(images.getString("sort_order")).append(",");
                        internalCounter++;
                    }
                    if (internalCounter < maxImageCount) {
                        for(int counter = 0; counter < (maxImageCount - internalCounter); counter++) 
                            imageCSV.append(",,,,,");
                    }
                    images.close();
                }
                else {
                    for(int counter = 0; counter < maxImageCount; counter++)
                        imageCSV.append(",,,,,");
                }
                csvproduct.append(imageCSV);
                csvproduct.append(csvify(productPull.getString("search_keywords"))).append(",");
                csvproduct.append(csvify(productPull.getString("page_title"))).append(",");
                csvproduct.append(csvify(productPull.getString("meta_keywords"))).append(",");
                csvproduct.append(csvify(productPull.getString("meta_description"))).append(",");
                csvproduct.append(csvify(productPull.getString("myob_asset_account"))).append(",");
                csvproduct.append(csvify(productPull.getString("myob_income_account"))).append(",");
                csvproduct.append(csvify(productPull.getString("myob_expense_account"))).append(",");
                csvproduct.append(csvify(productPull.getString("condition"))).append(",");
                csvproduct.append((productPull.getInt("is_condition_shown") == 0) ? "N" : "Y").append(",");
                csvproduct.append(!productPull.getString("event_date_start").equals("") || !productPull.getString("event_date_end").equals("") ? "Y" : "N").append(",");
                csvproduct.append(csvify(productPull.getString("event_date_field_name"))).append(",");
                csvproduct.append(productPull.getString("event_date_type").equals("none") ? "N" : "Y").append(",");
                csvproduct.append(csvify(productPull.getString("event_date_start"))).append(",");
                csvproduct.append(csvify(productPull.getString("event_date_end"))).append(",");
                csvproduct.append(productPull.getInt("sort_order")).append(",");
                csvproduct.append(csvify(getNameFromID(productPull.getInt("tax_class_id"),"taxes"))).append(",");
                csvproduct.append(csvify(productPull.getString("upc"))).append(",");
                csvproduct.append("N,");
                csvproduct.append(productPull.getString("custom_url")).append(",,");
                csvproduct.append("\n");
                output.print(csvproduct);
                numOfLines++;
                currentLine++;
                newThread.setPercentage((currentLine * 100) / totalLines);
                System.out.println("Wrote so far " + numOfLines + " records.");
                //build skus if exist
                if (skuCount > 0) {
                    int skuPages = (skuCount / LIMIT) + (((skuCount % LIMIT) > 0) ? 1 : 0);
                    for(int skuPage = 1; skuPage <= skuPages; skuPage++) {
                        queryStatement = "SELECT * FROM skus WHERE product_id = " + productPull.getInt("id") + " LIMIT " + LIMIT + (((LIMIT * (skuPage - 1)) > 0) ? (" OFFSET " + (LIMIT * (skuPage - 1))) : "");
                        ResultSet skus = databaseRepository.createStatement().executeQuery(queryStatement);
                        
                        while (skus.next()) {
                            StringBuilder csvsku = new StringBuilder("");
                            csvsku.append("SKU,");
                            csvsku.append(skus.getInt("id")).append(",");
                            JSONArray options = new JSONArray(skus.getString("options"));
                            String skuNameString = "";
                            for(int counter = 0; counter < options.length(); counter++) {
                                JSONObject optionObject = options.getJSONObject(counter);
                                String optionQuery = "SELECT options_values.label, options.type, option_set_options.display_name FROM options_values \n" +
                                                     "INNER JOIN options \n" +
                                                     "ON options_values.option_id = options.id \n" +
                                                     "INNER JOIN option_set_options\n" +
                                                     "ON options_values.option_id = option_set_options.option_id\n" +
                                                     "WHERE options_values.id = " + optionObject.getInt("option_value_id");
                                ResultSet optionLabel = databaseRepository.createStatement().executeQuery(optionQuery);
                                if (optionLabel.next()) {
                                    skuNameString += "[" + optionLabel.getString(2) + "]" + optionLabel.getString(3).replace("\"", "\"\"") + "=" + optionLabel.getString(1).replace("\"", "\"\"");
                                }
                                else {
                                    skuNameString += "[UNK]OPID " + optionObject.getInt("option_value_id");
                                }
                                if (counter < options.length() - 1)
                                    skuNameString += ",";
                            }
                            csvsku.append(csvify(skuNameString)).append(",,");
                            csvsku.append(csvify(skus.getString("sku"))).append(",");
                            csvsku.append(csvify(skus.getString("bin_picking_number"))).append(",,,,,,");
                            csvsku.append(skus.getDouble("cost_price")).append(",,,,,,,,,,,,,,");
                            csvsku.append(skus.getInt("inventory_level")).append(",");
                            csvsku.append(skus.getInt("inventory_warning_level")).append(",,,");
                            for(int counter = 0; counter < maxFileCount; counter++)
                                csvsku.append(",,,,");
                            for(int counter = 0; counter < maxImageCount; counter++)
                                csvsku.append(",,,,,");
                            csvsku.append(",,,,,,,,,,,,,,,").append(csvify(skus.getString("upc"))).append(",,,");
                            csvsku.append("\n");
                            output.print(csvsku);
                            numOfLines++;
                            currentLine++;
                            newThread.setPercentage((currentLine * 100) / totalLines);
                            
                        }
                        
                        skus.close();
                    }
                }
                //build rules if exist
                if (ruleCount > 0) {
                    int rulePages = (ruleCount / LIMIT) + (((ruleCount % LIMIT) > 0) ? 1 : 0);
                    for(int rulePage = 1; rulePage <= rulePages; rulePage++) {
                        queryStatement = "SELECT * FROM rules LIMIT WHERE product_id = " + productPull.getInt("id") + " LIMIT " + LIMIT + (((LIMIT * (rulePage - 1)) > 0) ? (" OFFSET " + (LIMIT * (rulePage - 1))) : "" + " WHERE product_id = " + productPull.getInt("id"));
                        ResultSet rules = databaseRepository.createStatement().executeQuery(queryStatement);
                        while(rules.next()) {
                            String csvrule = "";
                            String skuName = "";
                            String ruleNameString = "";
                            JSONArray conditions = new JSONArray(rules.getString("conditions"));
                            for(int counter = 0; counter < conditions.length(); counter++) {
                                JSONObject object = conditions.getJSONObject(counter);
                                if (object.get("sku_id") instanceof Integer && skuName.equals("")) {
                                    queryStatement = "SELECT sku FROM skus WHERE id = " + object.getInt("sku_id");
                                    ResultSet result = databaseRepository.createStatement().executeQuery(queryStatement);
                                    if (result.next()) {
                                        skuName = result.getString("sku");
                                    }
                                }
                                else if (object.get("option_value_id") instanceof Integer) {
                                    queryStatement = "SELECT options_values.label, options.type, option_set_options.display_name FROM options_values \n" +
                                                     "INNER JOIN options \n" +
                                                     "ON options_values.option_id = options.id \n" +
                                                     "INNER JOIN option_set_options\n" +
                                                     "ON options_values.option_id = option_set_options.option_id\n" +
                                                     "WHERE options_values.id = " + object.getInt("option_value_id");
                                    ResultSet result = databaseRepository.createStatement().executeQuery(queryStatement);
                                    ruleNameString += (!ruleNameString.equals("")) ? "," : "";
                                    ruleNameString += "[" + result.getString(2) + "]" + result.getString(3).replace("\"", "\"\"") + "=" + result.getString(1).replace("\"", "\"\"");
                                }
                                else {}
                            }
                            csvrule += "Rule,";
                            csvrule += rules.getInt("id") + ",";
                            csvrule += csvify(ruleNameString) + ",,";
                            csvrule += csvify(skuName) + ",,,,,,";
                            if (!rules.getString("price_adjuster").equals("")) {
                                JSONObject priceAdjuster = new JSONObject(rules.getString("price_adjuster"));
                                if(priceAdjuster.getString("adjuster").equals("relative")) {
                                    if (priceAdjuster.getInt("adjuster_value") < 0)
                                        csvrule += "[REMOVE]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,,,,";
                                    else
                                        csvrule += "[ADD]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,,,,";
                                }
                                else if (priceAdjuster.getString("adjuster").equals("percentage")) {
                                    if (priceAdjuster.getInt("adjuster_value") < 0)
                                        csvrule += "[REMOVE]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + "%,,,,,,,";
                                    else
                                        csvrule += "[ADD]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + "%,,,,,,,";
                                }
                                else if (priceAdjuster.getString("adjuster").equals("absolute")) {
                                    csvrule += "[FIXED]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,,,,";
                                }
                            }
                            else
                                csvrule += ",,,,,,,";
                            if (!rules.getString("weight_adjuster").equals("")) {
                                JSONObject priceAdjuster = new JSONObject(rules.getString("weight_adjuster"));
                                if(priceAdjuster.getString("adjuster").equals("relative")) {
                                    if (priceAdjuster.getInt("adjuster_value") < 0)
                                        csvrule += "[REMOVE]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,";
                                    else
                                        csvrule += "[ADD]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,";
                                }
                                else if (priceAdjuster.getString("adjuster").equals("percentage")) {
                                    if (priceAdjuster.getInt("adjuster_value") < 0)
                                        csvrule += "[REMOVE]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + "%,,,,";
                                    else
                                        csvrule += "[ADD]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + "%,,,,";
                                }
                                else if (priceAdjuster.getString("adjuster").equals("absolute")) {
                                    csvrule += "[FIXED]" + Math.abs(priceAdjuster.getDouble("adjuster_value")) + ",,,,";
                                }
                            }
                            else
                                csvrule += ",,,,";
                            csvrule += ((rules.getInt("is_purchasing_disabled") == 0) ? "Y" : "N") + ",";
                            csvrule += ((rules.getInt("is_purchasing_hidden") == 0) ? "Y" : "N") + ",,,,,,";
                            for(int counter = 0; counter < maxFileCount; counter++)
                                csvrule += ",,,,";
                            if (!rules.getString("image_file").equals(""))
                                csvrule += "," + rules.getString("image_file") + ",,N,,";
                            else
                                csvrule += ",,,,,";
                            for(int counter = 1; counter < maxImageCount; counter++)
                                csvrule += ",,,,,";
                            csvrule += ",,,,,,,,,,,,,,,,," + (rules.getInt("is_stop") == 0 ? "N" : "Y") + ",,";
                            output.print(csvrule +"\n");
                            numOfLines++;
                            currentLine++;
                            newThread.setPercentage((currentLine * 100) / totalLines);
                            
                        }
                        rules.close();
                    }
                }
                
            }
            productPull.close();
        }
        output.close();
        newThread.setPercentage(100);
        prefixTextField.setEnabled(true);
        generateLabel.setEnabled(true);
        limitComboBox.setEnabled(true);
        return null;
    }
        };
        worker.execute();
    }//GEN-LAST:event_generateLabelActionPerformed
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileSaver;
    private javax.swing.JButton generateLabel;
    private javax.swing.JComboBox limitComboBox;
    private javax.swing.JLabel limitLabel;
    private javax.swing.JLabel prefixLabel;
    private javax.swing.JTextField prefixTextField;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables


    public void recursiveAddition(String uri, String tableName, List <String> headers) throws SQLException, Exception {
        //find out if the resource has a count
        store.get(uri + "/count");
        if (store.getStatusCode() > 0)
            apiCount++;
        int resourceCount = -1;
        if (store.getStatusCode() == 200) {
            JSONObject object = new JSONObject(store.toString());
            resourceCount = object.getInt("count");
            newThread = new ProgressThread(progressBar, false, true);
        }  
        else {
            newThread = new ProgressThread(progressBar, true);
        }
        
        //setup the threads
        newThread.setCurrentTask("Gathering " + tableName);
        if (!newThread.isAlive())
            newThread.start();
        apiThread = new UpdateThread(desktop.getConnectivity(), store);
        apiThread.start();
        newThread.setPercentage(0);
        
        //get metadata of the uri
        String metaData;
        HashMap <String, String> columnMetaData = new HashMap<>();
        
        try {
            store.options(uri);
            if (store.getStatusCode() > 0)
                apiCount++;
            metaData = store.toString();
            JSONObject object = new JSONObject(metaData);
            JSONArray array = object.getJSONArray("fields");
            for(int counter = 0; counter < array.length(); counter++) {
                JSONObject field = array.getJSONObject(counter);
                if(field.getString("type").equals("int") || field.getString("type").equals("boolean"))
                    columnMetaData.put(field.getString("name"), "INTEGER");
                else if (field.getString("type").equals("decimal"))
                    columnMetaData.put(field.getString("name"), "REAL");
                else
                    columnMetaData.put(field.getString("name"), "TEXT");
            }
        } catch (Exception ex) {
            
        }
        //create the table now
        String table = "CREATE TABLE IF NOT EXISTS " + tableName + " ";
        for(int counter = 0; counter < headers.size(); counter++) {
            if (counter == 0)
                table += "(";
            table += headers.get(counter) + " " + columnMetaData.get(headers.get(counter));
            if (counter >= 0 && counter < headers.size() - 1)
                table += ",\n";
            if (counter == headers.size() - 1)
                table += ")";
        }
        Statement statement = databaseRepository.createStatement();
        statement.execute(table);
        statement.close();
        int page = 1;
        int jsonArrayLength = 0;
        String results;
        JSONArray arrayResults;
        JSONObject jsonObject;
        int fieldCounter = 0;
        long startTimer = 0;
        int numRecord = 0;
        do {
            if (newThread.isTimerAvailable()) 
                startTimer = System.nanoTime();
            try {
                store.get(uri + "?limit=249&page=" + page);
                if (store.getStatusCode() > 0)
                    apiCount++;
                results = store.toString();
                arrayResults = new JSONArray(results);
                jsonArrayLength = arrayResults.length();
                for(int counter = 0; counter < jsonArrayLength; counter++) {
                    jsonObject = arrayResults.getJSONObject(counter);
                    Statement insertStatement = databaseRepository.createStatement();
                    String insertRecord = "INSERT INTO " + tableName + " (" + headers.toString().replace("[","").replace("]","") + ") VALUES (";
                    for(fieldCounter = 0; fieldCounter < headers.size(); fieldCounter++) {
                        if(columnMetaData.get(headers.get(fieldCounter)).equals("TEXT"))
                            if (jsonObject.get(headers.get(fieldCounter)) instanceof JSONArray) 
                                insertRecord += "'" + jsonObject.getJSONArray(headers.get(fieldCounter)).toString() + "'";
                            else if (jsonObject.get(headers.get(fieldCounter)) instanceof JSONObject)
                                insertRecord += "'" + jsonObject.getJSONObject(headers.get(fieldCounter)).toString() + "'";
                            else if (jsonObject.isNull(headers.get(fieldCounter)))
                                insertRecord += "''";
                            else
                                insertRecord += "'" + jsonObject.getString(headers.get(fieldCounter)).replace("'", "''") + "'";
                        else if (columnMetaData.get(headers.get(fieldCounter)).equals("REAL"))
                            insertRecord += jsonObject.getDouble(headers.get(fieldCounter));
                        else if (columnMetaData.get(headers.get(fieldCounter)).equals("INTEGER")) {
                            if (jsonObject.get(headers.get(fieldCounter)) instanceof Boolean)
                                insertRecord += jsonObject.getBoolean(headers.get(fieldCounter)) ? "1" : "0";
                            else if (jsonObject.get(headers.get(fieldCounter)) instanceof Integer)
                                insertRecord += jsonObject.getInt(headers.get(fieldCounter));
                            else
                                insertRecord += "0";
                        }
                        else {}
                        if (fieldCounter < headers.size() - 1)
                            insertRecord += ",";                        
                    }

                    insertRecord += ")";
                    insertStatement.executeUpdate(insertRecord);
                    numRecord++;
                    insertStatement.close();
                    if (newThread.isTimerAvailable())
                        newThread.generateTime(startTimer, resourceCount, (counter + 1 + (249 * (page - 1))), 249);
                    if (resourceCount > 0)
                newThread.setPercentage((numRecord * 100) / resourceCount);
                }
                
                if (jsonArrayLength == 249)
                    page++;
            } catch (Exception ex) {
                System.out.println("Issue with the following: " + ex.getMessage() + " failed at " + headers.get(fieldCounter) + " for " + tableName + " in page " + page);
            }
            
           
        }  while(jsonArrayLength == 249);
        if (newThread.isIndefinate()) {
            newThread.setIndefinate(false);
        }
        newThread.setPercentage(100);
        apiThread.setPercentage(100);
        newThread.toggle("off");
    }
    
    public int getCount(String query) {
        int count = 0;
        try {
            ResultSet queryResults = databaseRepository.createStatement().executeQuery(query);
            if (queryResults.next()) 
                count = queryResults.getInt(1);
            queryResults.close();
        } catch (Exception ex) {
            System.out.println("Issue with the following: " + ex.getMessage());
        }
        return count;
    }
    
    public String getCategory(int id, HashMap <Integer, String> categories, HashMap <Integer, Integer> parents) {
        if (parents.get(id) == 0) {
            return categories.get(id);
        }
        else {
            return categories.get(id) + "/" + getCategory(parents.get(id), categories, parents);
        }
    }
    
    public String getCategory(int id) {
        String query = "WITH RECURSIVE categoryname AS \n" +
                       "(SELECT id, parent_id, name, CAST(name AS TEXT) AS fullname\n" +
                       "FROM categories\n" +
                       "WHERE parent_id = 0\n" +
                       "UNION ALL\n" +
                       "SELECT innerjoin.id, innerjoin.parent_id, innerjoin.name, CAST(outerjoin.fullname || '/' || innerjoin.name AS TEXT) AS fullname\n" +
                       "FROM categories AS 'innerjoin'\n" +
                       "INNER JOIN categoryname AS 'outerjoin'\n" +
                       "ON (innerjoin.parent_id = outerjoin.id)\n" +
                       ")\n" +
                       "SELECT fullname\n" +
                       "FROM categoryname\n" +
                       "WHERE id = " + id;
        String results = "";
        try {
            ResultSet queryResults = databaseRepository.createStatement().executeQuery(query);
            if (queryResults.next())
                results = queryResults.getString(1);
            else
                results =  "Invalid Cat " + id;
            queryResults.close();
        } catch (Exception ex) {
            System.out.println("Issue with the following: " + ex.getMessage());
        } 
        return results;
    }
    
    public String getNameFromID(int id, String table) {
        String returnValue = "";
        String queryStatement = "SELECT name FROM " + table + " WHERE id = " + id;
        try {
            ResultSet queryResults = databaseRepository.createStatement().executeQuery(queryStatement);
            if(queryResults.next())
                returnValue = queryResults.getString(1);
            queryResults.close();
        } catch (Exception ex) {
            System.out.println("Issue with the following: " + ex.getMessage());
        }
        return returnValue;
    }
    
    public static String csvify (String data) {
        String returnValue = "";
        String quotes = (data.contains(",") ? "\"" : "");
        returnValue = quotes + data.replace("\"", "\"\"") + quotes;
        return returnValue;
    }
    
    public static String csvify (StringBuilder data) {
        String returnValue = data.toString();
        if (returnValue.contains(",") || returnValue.contains("\""))
            returnValue = "\"" + returnValue.replace("\"", "\"\"") + "\"";
        return returnValue;
    }
}
