/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import BCLibrary.StoreBasic;
import Store.CategoryNode;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author julio
 */
public class CategoryDraw extends javax.swing.JFrame {

    private StoreBasic store;
    private int categoryCount;
    
    public class SizeComparator implements  Comparator<ArrayList<String>> {
           
        @Override
        public int compare(ArrayList<String> first, ArrayList<String> second) {
            return first.size() - second.size();
        }
    }
    
    public CategoryDraw() {
        categoryCount = 0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pathTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tokenTextField = new javax.swing.JTextField();
        buildButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        categoryTreeFromList = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("API Path");

        jLabel2.setText("API Username");

        jLabel3.setText("API Token");

        buildButton.setText("Build Tree");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Categories");
        categoryTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(categoryTree);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("From parent_id", jPanel1);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Categories");
        categoryTreeFromList.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(categoryTreeFromList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 490, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("From parent_id_list", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pathTextField)
                            .addComponent(usernameTextField)
                            .addComponent(tokenTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tokenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        store = new StoreBasic(pathTextField.getText(), usernameTextField.getText(), tokenTextField.getText(), true);
        try {
            if (store.testConnection()) {
                try {
                    store.get("categories/count");
                    JSONObject categoryObject = new JSONObject(store.toString());
                    categoryCount = categoryObject.getInt("count");
                } catch (IOException ex) {
                    //what to do when i fails
                } catch (Exception ex) {
                    Logger.getLogger(CategoryDraw.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (categoryCount > 0) {
                    int page = 1;
                    String results;
                    JSONArray jsonArray;
                    int jsonArrayLength = 0;
                    int percentage = 0;
                    JSONObject categoryObject;
                    DefaultMutableTreeNode root = (DefaultMutableTreeNode) categoryTree.getModel().getRoot();
                    DefaultMutableTreeNode rootList = (DefaultMutableTreeNode) categoryTreeFromList.getModel().getRoot();
                    HashMap <Integer, CategoryNode> temporaryRepository = new HashMap<>();
                    HashMap <Integer, ArrayList<String>> fromParentList = new HashMap<>();
                    do {
                        try {
                            store.get("categories?limit=249&page=" + page);
                            results = store.toString();
                            jsonArray = new JSONArray(results);
                            jsonArrayLength = jsonArray.length();
                            
                            for(int index = 0; index < jsonArrayLength; index++) {
                                categoryObject = jsonArray.getJSONObject(index);
                                String parentList = categoryObject.getJSONArray("parent_category_list").toString().replace("[", "").replace("]", "");
                                fromParentList.put(categoryObject.getInt("id"), new ArrayList(Arrays.asList(parentList.split(","))));
                                if (categoryObject.getInt("parent_id") == 0) {
                                    root.add(new DefaultMutableTreeNode(new CategoryNode(categoryObject.getString("name"), categoryObject.getInt("id"), categoryObject.getInt("parent_id"))));
                                }
                                else {
                                    DefaultMutableTreeNode node = search(categoryObject.getInt("parent_id"));
                                    if (node == null) {
                                        temporaryRepository.put(categoryObject.getInt("id"), new CategoryNode(categoryObject.getString("name"), categoryObject.getInt("id"), categoryObject.getInt("parent_id")));
                                    }
                                    else {
                                        node.add(new DefaultMutableTreeNode(new CategoryNode(categoryObject.getString("name"), categoryObject.getInt("id"), categoryObject.getInt("parent_id"))));
                                        if (temporaryRepository.size() > 0) {
                                            for(CategoryNode tempnode: temporaryRepository.values()) {
                                                DefaultMutableTreeNode treeNode = search(tempnode.getParentID()); 
                                                if(treeNode != null) {
                                                    System.out.println(tempnode.getName() + " - " + tempnode.getParentID());
                                                    treeNode.add(new DefaultMutableTreeNode(tempnode));
                                                    temporaryRepository.remove(tempnode);
                                                }
                                            }
                                        }
                                    }
                                }
                                
                                percentage = (((index + 1 + (249 * (page - 1))) * 100) / categoryCount);
                            }
                            if (jsonArrayLength == 249) page++;
                        } catch (IOException ex) {
                            //if there is an error with getting stuff?
                        }
                    } while (jsonArrayLength == 249);
                    //clean up
                    if (temporaryRepository.size() > 0) {
                        for(CategoryNode node: temporaryRepository.values()) {
                            DefaultMutableTreeNode treeNode = search(node.getParentID());
                            if(treeNode != null) {
                                treeNode.add(new DefaultMutableTreeNode(node));
                                temporaryRepository.remove(node);
                            }
                        }
                    }
                    ((DefaultTreeModel) categoryTree.getModel()).reload();
                    //buld the other tree
                    
                    for(Integer key: fromParentList.keySet()) {
                        ArrayList <String> value = fromParentList.get(key);
                        if (key != Integer.parseInt(value.get(0))) {
                            
                        }
                        
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(CategoryDraw.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buildButtonActionPerformed
    
    
    public DefaultMutableTreeNode search(String categoryName) {
        DefaultMutableTreeNode node = null;
        Enumeration e = ((DefaultMutableTreeNode) categoryTree.getModel().getRoot()).breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            //System.out.println(node.getUserObject().toString());
            if (categoryName.equals(node.getUserObject().toString())) {
                return node;
            }
        }
        return null;
    }
    
    public DefaultMutableTreeNode search(int id) {
        int counter = 0;
        DefaultMutableTreeNode node = null;
        Enumeration e = ((DefaultMutableTreeNode) categoryTree.getModel().getRoot()).breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            
            node = (DefaultMutableTreeNode) e.nextElement();
            if (counter == 0)
                node = (DefaultMutableTreeNode) e.nextElement();
            //System.out.println(node.getUserObject().toString());
            if (id == ((CategoryNode) node.getUserObject()).getID()) {
                return node;
            }
            counter++;
        }
        return null;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CategoryDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CategoryDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CategoryDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CategoryDraw.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CategoryDraw().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildButton;
    private javax.swing.JTree categoryTree;
    private javax.swing.JTree categoryTreeFromList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JTextField tokenTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
