/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import BCLibrary.StoreBasic;
import Store.CategoryNode;
import java.io.IOException;
import java.util.Enumeration;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author julio
 */
public class JTreeDemo extends javax.swing.JPanel {

    private StoreBasic store;
    private int categoryCount;
    
    public JTreeDemo() {
        categoryCount = 0;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        jLabel1 = new javax.swing.JLabel();
        pathTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        usernameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tokenTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        categoryTree = new javax.swing.JTree();
        buildButton = new javax.swing.JButton();

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
            jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel1.setText("API Path");

        jLabel2.setText("API Username");

        jLabel3.setText("API Token");

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        categoryTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(categoryTree);

        buildButton.setText("Build Tree");
        buildButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buildButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(usernameTextField)
                            .addComponent(pathTextField)
                            .addComponent(tokenTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buildButton)
                        .addGap(0, 24, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(pathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buildButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tokenTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buildButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buildButtonActionPerformed
        store = new StoreBasic(pathTextField.getText(), usernameTextField.getText(), tokenTextField.getText());
        try {
            if (store.testConnection()) {
                try {
                    store.get("categories/count");
                    JSONObject categoryObject = new JSONObject(store.toString());
                    categoryCount = categoryObject.getInt("count");
                } catch (IOException ex) {
                    //what to do when i fails
                } catch (Exception ex) {
                    Logger.getLogger(JTreeDemo.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (categoryCount > 0) {
                    int page = 1;
                    String results;
                    JSONArray jsonArray;
                    int jsonArrayLength = 0;
                    int percentage = 0;
                    JSONObject categoryObject;
                    DefaultMutableTreeNode root = new DefaultMutableTreeNode("Categories");
                    categoryTree.setModel(new DefaultTreeModel(root));
                    do {
                        try {
                            store.get("categories?limit=249&page=" + page);
                            results = store.toString();
                            jsonArray = new JSONArray(results);
                            jsonArrayLength = jsonArray.length();
                            for(int index = 0; index < jsonArrayLength; index++) {
                                categoryObject = jsonArray.getJSONObject(index);
                                if (categoryObject.getInt("parent_id") == 0) {                                
                                    root.add(new DefaultMutableTreeNode(new CategoryNode(categoryObject.getString("name"), categoryObject.getInt("id"), categoryObject.getInt("parent_id"))));
                                }
                                
                                percentage = (((index + 1 + (249 * (page - 1))) * 100) / categoryCount);
                            }
                            if (jsonArrayLength == 249) page++;
                        } catch (IOException ex) {
                            //if there is an error with getting stuff?
                        } catch (Exception ex) {
                            Logger.getLogger(JTreeDemo.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } while (jsonArrayLength == 249);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(JTreeDemo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_buildButtonActionPerformed

    public DefaultMutableTreeNode search(String categoryName) {
        DefaultMutableTreeNode node = null;
        Enumeration e = ((DefaultMutableTreeNode) categoryTree.getModel().getRoot()).breadthFirstEnumeration();
        while (e.hasMoreElements()) {
            node = (DefaultMutableTreeNode) e.nextElement();
            if (categoryName.equals(node.getUserObject().toString())) {
                return node;
            }
        }
        return null;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buildButton;
    private javax.swing.JTree categoryTree;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField pathTextField;
    private javax.swing.JTextField tokenTextField;
    private javax.swing.JTextField usernameTextField;
    // End of variables declaration//GEN-END:variables
}
