/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import BCLibrary.StoreBasic;
import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import Threads.ProgressThread;
import Threads.UpdateThread;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import javax.swing.JFileChooser;
import javax.swing.SwingConstants;
import javax.swing.SwingWorker;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author julio
 */
public class DeleteForm extends javax.swing.JInternalFrame {
    
    HashMap <String, String> apiURLs;
    private StoreBasic store;
    private EscalationsDesktop desktop;
    private String currentTask;
    private String timer;
    private File selectedFile;
    private String fileName;
    private ProgressThread newThread;
    private UpdateThread apiThread;
    private Connection database;
    private PreparedStatement preparedStatement;
    private Statement statement;
    private long startTimer;
    private int count;
    private int percentage;
    
    
    public DeleteForm(StoreBasic store, EscalationsDesktop desktop) throws SQLException {
        this.store = store;
        this.apiURLs = new HashMap<>();
        this.count = -1;
        this.desktop = desktop;
        this.database = desktop.getDBConnection();
        this.statement = database.createStatement();
        this.database.setAutoCommit(false);
        this.preparedStatement = null;
        this.percentage = 0;
        this.fileName = "";
        
        //construct HASHMAP
        apiURLs.put("Blog Posts","blog/posts");
        apiURLs.put("Brands","brands");
        apiURLs.put("Bulk Discounts","products/discount_rules");
        apiURLs.put("Categories","categories");
        apiURLs.put("Coupons","coupons");
        apiURLs.put("Custom Fields","products/custom_fields");
        apiURLs.put("Customers","customers");
        apiURLs.put("Customer Groups", "customer_groups");
        apiURLs.put("Options", "options");
        apiURLs.put("Option Set Options", "option_sets/options");
        apiURLs.put("Option Sets", "option_sets");
        apiURLs.put("Option Values", "options/values");
        apiURLs.put("Orders", "orders");
        apiURLs.put("Order Shipments", "orders/shipments");
        apiURLs.put("Products", "products");
        apiURLs.put("Product Images", "products/images");
        apiURLs.put("Product Rules", "products/rules");
        apiURLs.put("Product SKUs", "products/skus");
        apiURLs.put("Product Videos", "products/videos");
        apiURLs.put("Redirects", "redirects");
        
        initComponents();
    }
    
    public DeleteForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        deleteGroup = new javax.swing.ButtonGroup();
        fileChooser = new javax.swing.JFileChooser();
        resourceCombo = new javax.swing.JComboBox();
        selectLabel = new javax.swing.JLabel();
        allResource = new javax.swing.JRadioButton();
        csvResource = new javax.swing.JRadioButton();
        progressBar = new javax.swing.JProgressBar();
        browseButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();

        fileChooser.setFileFilter(new TXTFilter());

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Delete");

        resourceCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--- Select One ---", "Blog Posts", "Brands", "Bulk Discounts", "Categories", "Coupons", "Custom Fields", "Customers", "Customer Groups", "Options", "Option Set Options", "Option Sets", "Option Values", "Orders", "Order Shipments", "Products", "Product Images", "Product Rules", "Product SKUs", "Product Videos", "Redirects" }));
        resourceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceComboActionPerformed(evt);
            }
        });

        selectLabel.setText("Select Resource");

        deleteGroup.add(allResource);
        allResource.setText("Delete all");
        allResource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allResourceActionPerformed(evt);
            }
        });

        deleteGroup.add(csvResource);
        csvResource.setText("Delete by CSV");
        csvResource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvResourceActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);

        browseButton.setText("Browse");
        browseButton.setEnabled(false);
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Proceed");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        fileLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fileLabel.setText("No file chosen...");
        fileLabel.setEnabled(false);

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(10);
        jSlider1.setMinimum(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(deleteButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resourceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(allResource))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(csvResource)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectLabel)
                    .addComponent(deleteButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resourceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(allResource)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(browseButton)
                    .addComponent(csvResource)
                    .addComponent(fileLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void allResourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allResourceActionPerformed
        browseButton.setEnabled(false);
        fileLabel.setEnabled(false);
    }//GEN-LAST:event_allResourceActionPerformed

    private void csvResourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvResourceActionPerformed
        browseButton.setEnabled(true);
        fileLabel.setEnabled(true);
    }//GEN-LAST:event_csvResourceActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = fileChooser.getSelectedFile();
            try {
                fileName = selectedFile.getCanonicalPath();
                if (!fileName.endsWith(".csv"))
                    selectedFile = new File(fileName + ".csv");
                //find a way to truncate this
                fileLabel.setText(selectedFile.getName());
            } catch (IOException ex) {
                
            }
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        SwingWorker <Void, Void> worker = new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                final String chosenOption = (String) resourceCombo.getSelectedItem();
                if (allResource.isSelected() && !chosenOption.equals("--- Select One ---")) {
                    //gather and store IDs with uri?
                    deleteButton.setEnabled(false);
                    int page = 1;
                    JSONArray jsonArray;
                    JSONObject jsonObject;
                    store.get(apiURLs.get(chosenOption) + "/count");
                    if (store.getStatusCode() == 200) {
                        JSONObject object = new JSONObject(store.toString());
                        count = object.getInt("count");
                        newThread = new ProgressThread(progressBar, false, true);
                    }  
                    else {
                        newThread = new ProgressThread(progressBar, true);
                    }
                    //resultsLable.setText(" ");
                    newThread.setCurrentTask("Gathering " + chosenOption);
                    apiThread = new UpdateThread(desktop.getConnectivity(), store);
                    newThread.start();
                    apiThread.start();
                    int numRecords = 0;
                        String sqlStatement = "INSERT INTO deleteformtable (id) " +
                                               "VALUES(?);";
                        preparedStatement = database.prepareStatement(sqlStatement);
                        do {
                            if (newThread.isTimerAvailable()) 
                                startTimer = System.nanoTime();
                            store.get(apiURLs.get(chosenOption) + "?limit=249&page=" + page);
                            jsonArray = new JSONArray(store.toString());
                            for (int index = 0; index < jsonArray.length(); index++) {
                                numRecords++;
                                jsonObject = jsonArray.getJSONObject(index);
                                if (jsonObject.get("id") instanceof String)
                                    preparedStatement.setString(1, jsonObject.getString("id"));
                                else
                                    preparedStatement.setString(1, Integer.toString(jsonObject.getInt("id")));
                                preparedStatement.executeUpdate();
                            }
                            if (jsonArray.length() == 249)
                                page++;
                            if (newThread.isTimerAvailable())
                                newThread.generateTime(startTimer, count, numRecords, 249);
                            if (count > 0)
                                newThread.setPercentage(numRecords * 100 / count);
                        } while(jsonArray.length() == 249);
                        newThread.setPercentage(0);
                        database.commit();
                        newThread.toggle("on");
                        newThread.setCurrentTask("Deleting " + chosenOption);
                        if (!newThread.isAlive())
                            newThread.start();
                        try {
                            ResultSet countIDs = statement.executeQuery("SELECT COUNT(*) AS 'count' FROM deleteformtable");
                            int totalCount = 0;
                            while(countIDs.next())
                                totalCount = countIDs.getInt("count");
                            countIDs.close();
                            ResultSet setOfIDs = statement.executeQuery("SELECT * FROM deleteformtable");
                            System.out.println("Rows: " + totalCount);
                            preparedStatement = database.prepareStatement("DELETE FROM deleteformtable WHERE id = ?");
                            int currentCount = 0;
                            int actualCount = 0;
                            while(setOfIDs.next()) {
                                startTimer = System.nanoTime();
                                store.delete(apiURLs.get(chosenOption) + "/" + setOfIDs.getString("id"));
                                System.out.println("Deleted: " + apiURLs.get(chosenOption) + "/" + setOfIDs.getString("id") + " with response code " + store.getStatusCode());
                                if (store.getStatusCode() == 204) {
                                    preparedStatement.setString(1, setOfIDs.getString("id"));
                                    preparedStatement.executeUpdate();
                                    actualCount++;
                                }
                                currentCount++;
                                newThread.setPercentage((currentCount * 100) / totalCount);
                                //newThread.setTimerString(timerString(startTimer, totalCount, currentCount));
                                newThread.generateTime(startTimer, totalCount, currentCount,1);
                            }
                            database.commit();
                            deleteButton.setEnabled(true);
                            desktop.appendStatusPane("Out of " + currentCount + " IDs " + actualCount + " were deleted.");
                        } catch (SQLException ex) {
                            System.out.println("Issue with the following: " + ex.getMessage());
                        }
                        
                }
                else if (csvResource.isSelected() && !chosenOption.equals("--- Select One ---")) {
                    //load to database
                    deleteButton.setEnabled(false);
                    String sqlStatement = "INSERT INTO deleteformtable (id) " +
                                               "VALUES(?);";
                    preparedStatement = database.prepareStatement(sqlStatement);
                    Scanner reader = new Scanner(selectedFile);
                    int lineCount = 0;
                    while(reader.hasNext()) {
                        preparedStatement.setString(1, reader.next());
                        preparedStatement.executeUpdate();
                        lineCount++;
                    }
                    newThread = new ProgressThread(progressBar, false, true);
                    newThread.setCurrentTask("Deleting " + chosenOption);
                    apiThread = new UpdateThread(desktop.getConnectivity(), store);
                    newThread.start();
                    apiThread.start();
                    newThread.setPercentage(0);
                    database.commit();
                    
                    ResultSet setOfIDs = statement.executeQuery("SELECT * FROM deleteformtable");
                    preparedStatement = database.prepareStatement("DELETE FROM deleteformtable WHERE id = ?");
                    int currentCount = 0;
                    int actualCount = 0;
                    while (setOfIDs.next()) {
                        startTimer = System.nanoTime();
                        store.delete(apiURLs.get(chosenOption) + "/" + setOfIDs.getString("id"));
                        if (store.getStatusCode() == 204) {
                            preparedStatement.setString(1, setOfIDs.getString("id"));
                            preparedStatement.executeUpdate();
                            actualCount++;
                        }
                        currentCount++;
                        newThread.setPercentage((currentCount * 100) / lineCount);
                                //newThread.setTimerString(timerString(startTimer, totalCount, currentCount));
                        newThread.generateTime(startTimer, lineCount, currentCount,1);
                    }
                    database.commit();
                    deleteButton.setEnabled(true);
                    selectedFile = null;
                    fileLabel.setText("");
                    desktop.appendStatusPane("Out of " + currentCount + " IDs " + actualCount + " were deleted.");
                }
                else {}
        //videos use IDs that are string, others use integers
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void resourceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceComboActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resourceComboActionPerformed

    
    class TXTFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            return "Comma Delimited Files (.csv)";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton allResource;
    private javax.swing.JButton browseButton;
    private javax.swing.JRadioButton csvResource;
    private javax.swing.JButton deleteButton;
    private javax.swing.ButtonGroup deleteGroup;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JComboBox resourceCombo;
    private javax.swing.JLabel selectLabel;
    // End of variables declaration//GEN-END:variables
}
