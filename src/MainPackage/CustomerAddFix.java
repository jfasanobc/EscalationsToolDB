/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;

import BCLibrary.StoreBasic;
import Threads.ProgressThread;
import Threads.UpdateThread;
import java.io.IOException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingWorker;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author julio.sevilla
 */
public class CustomerAddFix extends javax.swing.JInternalFrame {

    HashMap <String, String> states;
    private final StoreBasic store;
    private final EscalationsDesktop desktop;
    private ProgressThread newThread;
    private UpdateThread apiThread;
    
    public CustomerAddFix(StoreBasic store, EscalationsDesktop desktop) throws IOException, ClassNotFoundException {
        states = new HashMap<>();
        states.put("AL","Alabama");
        states.put("AK","Alaska");
        states.put("AZ","Arizona");
        states.put("AR","Arkansas");
        states.put("CA","California");
        states.put("CO","Colorado");
        states.put("CT","Connecticut");
        states.put("DE","Delaware");
        states.put("DC","District of Columbia");
        states.put("FL","Florida");
        states.put("GA","Georgia");
        states.put("HI","Hawaii");
        states.put("ID","Idaho");
        states.put("IL","Illinois");
        states.put("IN","Indiana");
        states.put("IA","Iowa");
        states.put("KS","Kansas");
        states.put("KY","Kentucky");
        states.put("LA","Louisiana");
        states.put("ME","Maine");
        states.put("MD","Maryland");
        states.put("MA","Massachusetts");
        states.put("MI","Michigan");
        states.put("MN","Minnesota");
        states.put("MS","Mississippi");
        states.put("MO","Missouri");
        states.put("MT","Montana");
        states.put("NE","Nebraska");
        states.put("NV","Nevada");
        states.put("NH","New Hampshire");
        states.put("NJ","New Jersey");
        states.put("NM","New Mexico");
        states.put("NY","New York");
        states.put("NC","North Carolina");
        states.put("ND","North Dakota");
        states.put("OH","Ohio");
        states.put("OK","Oklahoma");
        states.put("OR","Oregon");
        states.put("PA","Pennsylvania");
        states.put("RI","Rhode Island");
        states.put("SC","South Carolina");
        states.put("SD","South Dakota");
        states.put("TN","Tennessee");
        states.put("TX","Texas");
        states.put("UT","Utah");
        states.put("VT","Vermont");
        states.put("VA","Virginia");
        states.put("WA","Washington");
        states.put("WV","West Virginia");
        states.put("WI","Wisconsin");
        states.put("WY","Wyoming");
        this.store = store;
        this.desktop = desktop;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        progressBar = new javax.swing.JProgressBar();
        fixButton = new javax.swing.JButton();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);

        progressBar.setStringPainted(true);

        fixButton.setText("Fix");
        fixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(fixButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fixButton)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixButtonActionPerformed
        SwingWorker <Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
            protected Void doInBackground() throws Exception {
                fixButton.setEnabled(false);
                int page = 1;
                int jsonArrayLength = 0;
                JSONArray objectList;
                JSONArray addresses;
                JSONObject customerAddress;
                JSONObject changeStuff = new JSONObject();
                JSONObject jsonObject;
                int numberOfAddresses = 0;
                try {
                    store.get("customers/addresses/count");
                } catch (Exception ex) {
            
                }
                newThread = new ProgressThread(progressBar, false, false);
                newThread.setPercentage(0);
                newThread.setCurrentTask("Correcting Addresses");
                apiThread = new UpdateThread(desktop.getConnectivity(), store);
                newThread.start();
                apiThread.start();
                jsonObject = new JSONObject(store.toString());
                int customerAddressCount = jsonObject.getInt("count");
                do {
                   try {
                        store.get("customers?limit=250&page=" + page);
                        String tempHolder = store.toString();
                        objectList = new JSONArray(tempHolder);
                        jsonArrayLength = objectList.length();
                
                        for (int index = 0; index < objectList.length(); index++) {
                            store.get("customers/" + objectList.getJSONObject(index).getInt("id") + "/addresses");
                            if (store.getStatusCode() == 200) {
                                String tempAddresses = store.toString();
                                if(tempAddresses.startsWith("["))
                                    addresses = new JSONArray(tempAddresses);
                                else
                                    addresses = new JSONArray("[" + tempAddresses + "]");
                                for(int innerIndex = 0; innerIndex < addresses.length(); innerIndex++) {
                                    customerAddress = addresses.getJSONObject(innerIndex);
                                    //System.out.println(customerAddress);
                                    if (customerAddress.getString("country").equals("US") || customerAddress.getString("country").equals("USA")) {
                                        changeStuff.put("country", "United States");
                                        if(states.containsKey(customerAddress.getString("state"))) {
                                            changeStuff.put("state", states.get(customerAddress.getString("state")));
                                            store.put("customers/" + objectList.getJSONObject(index).getInt("id") + "/addresses/" + customerAddress.getInt("id"), changeStuff);
                                            numberOfAddresses++;
                                            //add progress here
                                            newThread.setPercentage((numberOfAddresses * 100) / customerAddressCount);
                                        }
                                    }
                                }
                            }       
                        }
                        if (jsonArrayLength == 250) page++;
                    } catch (IOException ex) {
            
                    } catch (Exception ex) {
                        Logger.getLogger(CustomerAddFix.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } while (jsonArrayLength == 250);
                newThread.setPercentage(100);
                apiThread.setPercentage(100);
                newThread.toggle("off");
                fixButton.setEnabled(true);
                return null;
            }
        };
        worker.execute();
    }//GEN-LAST:event_fixButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton fixButton;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
