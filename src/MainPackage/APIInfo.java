/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainPackage;


import BCLibrary.StoreBasic;
import Threads.ProgressThread;
import Threads.UpdateThread;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;
import javax.swing.JFileChooser;
import javax.swing.SwingWorker;
import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author julio
 */
public class APIInfo extends javax.swing.JInternalFrame {
    HashMap <String, String> apiURLs;
    private StoreBasic store;
    private EscalationsDesktop desktop;
    private ProgressThread newThread;
    private UpdateThread apiThread;
    private long startTimer;
    private int count;
    
    
    public APIInfo() {
        initComponents();
    }
    
    
    public APIInfo(StoreBasic store, EscalationsDesktop desktop) {
        initComponents();
        this.store = store;
        this.apiURLs = new HashMap<>();
        this.count = 0;
        this.desktop = desktop;
        this.startTimer = 0;
        
        //construct the HashMap
        this.apiURLs.put("301 Redirects","redirects");
        this.apiURLs.put("Banners","banners");
        this.apiURLs.put("Blog Posts","blog/posts");
        this.apiURLs.put("Blog Tags","blog/tags");
        this.apiURLs.put("Brands","brands");
        this.apiURLs.put("Bulk Price On Products","products/discount_rules");
        this.apiURLs.put("Categories","categories");
        this.apiURLs.put("Countries","countries");
        this.apiURLs.put("Coupons","coupons");
        this.apiURLs.put("Custom Fields","products/custom_fields");
        this.apiURLs.put("Customer Addresses","customers/addresses");
        this.apiURLs.put("Customer Groups","customer_groups");
        this.apiURLs.put("Customers","customers");
        this.apiURLs.put("Enabled Payments","payment/methods");
        this.apiURLs.put("Option Sets","option_sets");
        this.apiURLs.put("Option Values","options/values");
        this.apiURLs.put("Options","options");
        this.apiURLs.put("Options Assigned To Option Sets","option_sets/options");
        this.apiURLs.put("Order Coupons","orders/coupons");
        this.apiURLs.put("Order Messages","orders/messages");
        this.apiURLs.put("Order Products","orders/products");
        this.apiURLs.put("Order Shipments","orders/shipments");
        this.apiURLs.put("Order Shipping Addresses","orders/shipping_addresses");
        this.apiURLs.put("Order Statuses","order_statuses");
        this.apiURLs.put("Order Taxes","orders/taxes");
        this.apiURLs.put("Orders","orders");
        this.apiURLs.put("Product Images","products/images");
        this.apiURLs.put("Product Options","options");
        this.apiURLs.put("Product Reviews","products/reviews");
        this.apiURLs.put("Product Rules","products/rules");
        this.apiURLs.put("Products","products");
        this.apiURLs.put("Shipping Methods","shipping/methods");
        this.apiURLs.put("SKUs","products/skus");
        this.apiURLs.put("States","countries/states");
        this.apiURLs.put("Store Information","store");
        this.apiURLs.put("Tax Classes","tax_classes");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileSaver = new javax.swing.JFileChooser();
        typeReport = new javax.swing.JComboBox();
        progressBar = new javax.swing.JProgressBar();
        pullButton = new javax.swing.JButton();
        resultsLable = new javax.swing.JLabel();

        fileSaver.setFileFilter(new TXTFilter());

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("API Pulls");

        typeReport.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "--Select One--", "301 Redirects", "Banners", "Blog Posts", "Blog Tags", "Brands", "Bulk Price On Products", "Categories", "Countries", "Coupons", "Custom Fields", "Customer Addresses", "Customer Groups", "Customers", "Enabled Payments", "Option Sets", "Option Values", "Options", "Options Assigned To Option Sets", "Order Coupons", "Order Messages", "Order Products", "Order Shipments", "Order Shipping Addresses", "Order Statuses", "Order Taxes", "Orders", "Product Images", "Product Options", "Product Reviews", "Product Rules", "Products", "Shipping Methods", "SKUs", "States", "Store Information", "Tax Classes" }));

        progressBar.setStringPainted(true);

        pullButton.setText("Pull");
        pullButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pullButtonActionPerformed(evt);
            }
        });

        resultsLable.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(typeReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultsLable, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(pullButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pullButton)
                    .addComponent(resultsLable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(typeReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pullButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pullButtonActionPerformed
        final APIInfo currentIF = this;
        final String optionChosen = (String) typeReport.getSelectedItem();
        if(!(optionChosen.equals("--Select One--"))) {
            SwingWorker <Void, Void> worker = new SwingWorker<Void, Void>() {
                @Override
                protected Void doInBackground() throws Exception {
                    File savedFile;
                    fileSaver.setCurrentDirectory(new File(System.getProperty("user.dir")));
                    int returnValue = fileSaver.showSaveDialog(currentIF);
                    if (returnValue == JFileChooser.APPROVE_OPTION) {
                        savedFile = fileSaver.getSelectedFile();
                        String fileName = null;
                        try {
                            fileName = savedFile.getCanonicalPath();
                            if (!fileName.endsWith(".csv"))
                                savedFile = new File(fileName + ".csv");
                            pullButton.setEnabled(false);
                            store.get(apiURLs.get(optionChosen) + "/count");
                            if (store.getStatusCode() == 200) {
                                JSONObject object = (new JSONObject(store.toString()));
                                count = object.getInt("count");
                                newThread = new ProgressThread(progressBar, false, true);
                            }
                            else {
                                newThread = new ProgressThread(progressBar, true);
                            }
                            //test the endpoint to see if it has anything
                            store.get(apiURLs.get(optionChosen));
                            if (store.getStatusCode() == 200) {
                                resultsLable.setText(" ");
                                newThread.setCurrentTask("Gathering " + optionChosen);
                                apiThread = new UpdateThread(desktop.getConnectivity(), store);
                                newThread.start();
                                apiThread.start();
                                JSONArray newArray;
                                int page = 1;
                                JSONObject newJSONObject;
                                FileWriter output = new FileWriter(savedFile);
                                ArrayList <String> headerList = new ArrayList<>();
                            
                                int numRecords = 0;
                                do {
                                    if (newThread.isTimerAvailable()) 
                                        startTimer = System.nanoTime();
                                    store.get(apiURLs.get(optionChosen) + "?limit=249&page=" + page);
                                    newArray = new JSONArray(store.toString());
                                    for (int counter=0; counter < newArray.length(); counter++) {
                                        numRecords++;
                                        newJSONObject = newArray.getJSONObject(counter);
                                        if (counter == 0 && page == 1 && headerList.isEmpty()) {
                                            Set keys = newJSONObject.keySet();
                                            Iterator aKeys = keys.iterator();
                                            while(aKeys.hasNext()) {
                                                headerList.add((String) aKeys.next());
                                            }
                                            for(int arraycounter = 0; arraycounter < headerList.size(); arraycounter++) {
                                                if (arraycounter != headerList.size() - 1)
                                                    output.write(headerList.get(arraycounter) + ",");
                                                else
                                                    output.write(headerList.get(arraycounter) + "\n");
                                            }
                                        }
                                        else if (counter == 0 && page ==1 && !(headerList.isEmpty())) {
                                            for(int arraycounter = 0; arraycounter < headerList.size(); arraycounter++) {
                                                if (arraycounter != headerList.size() - 1)
                                                    output.write(headerList.get(arraycounter) + ",");
                                                else
                                                    output.write(headerList.get(arraycounter) + "\n");
                                            }
                                        }
                                        
                                        for(int arraycounter = 0; arraycounter < headerList.size(); arraycounter++) {
                                            String value = "";
                                            if (newJSONObject.has(headerList.get(arraycounter))) {
                                                if (newJSONObject.get(headerList.get(arraycounter)) instanceof JSONArray)
                                                    value = newJSONObject.getJSONArray(headerList.get(arraycounter)).toString();
                                                else if (newJSONObject.get(headerList.get(arraycounter)) instanceof JSONObject)
                                                    value = newJSONObject.getJSONObject(headerList.get(arraycounter)).toString();
                                                else
                                                    value = newJSONObject.get(headerList.get(arraycounter)).toString();
                                                value = value.replace("\"", "\"\"");
                                            }
                                            if (arraycounter != headerList.size() - 1)
                                                output.write("\"" + value + "\"" + ",");
                                            else
                                                output.write("\"" + value + "\"" + "\n");
                                            
                                        }
                                        if (newThread.isTimerAvailable()) {
                                            //newThread.setTimerString(timerString(startTimer, count, numRecords));
                                            newThread.generateTime(startTimer, count, numRecords,249);
                                        }
                                        if (count > 0)
                                            newThread.setPercentage(numRecords * 100 / count);
                                    }
                                    if (newArray.length() == 249)
                                        page++;
                                } while (newArray.length() == 249);
                                if (newThread.isIndefinate())
                                    newThread.setIndefinate(false);
                                newThread.setPercentage(100);
                                apiThread.setPercentage(100);
                        
                                output.close();
                                desktop.appendStatusPane("Wrote " + numRecords + " records to " + (!fileName.endsWith(".csv") ? fileName + ".csv" : fileName) +" <a href=\"file:///" + (!fileName.endsWith(".csv") ? fileName.replace("\\", "/") + ".csv" : fileName.replace("\\", "/")) + "\">Open</a>\n");
                                pullButton.setEnabled(true);
                            }
                            else {
                                resultsLable.setText("There are no " + optionChosen);
                                pullButton.setEnabled(true);
                            }
                        } catch (IOException ex) {
                            System.out.println(ex.getMessage());
                            apiThread.toggle("off");
                            newThread.toggle("off");
                            pullButton.setEnabled(true);
                        } 
                    }
                    return null;
                }
            };
            worker.execute();
        }
    }//GEN-LAST:event_pullButtonActionPerformed
    
    class TXTFilter extends javax.swing.filechooser.FileFilter {
        @Override
        public boolean accept(File file) {
            return file.isDirectory() || file.getAbsolutePath().endsWith(".csv");
        }
        @Override
        public String getDescription() {
            return "Comma Delimited Files (.csv)";
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileSaver;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton pullButton;
    private javax.swing.JLabel resultsLable;
    private javax.swing.JComboBox typeReport;
    // End of variables declaration//GEN-END:variables
}
